import { parse } from "https://deno.land/std@0.175.0/flags/mod.ts";
// import { resolve } from "https://deno.land/std/path/mod.ts";
import { promises } from "node:fs";

const FLAGS = parse(Deno.args, {
  string: ["path", "output"],
  default: { path: ".", output: "./svgDictionary.ts" },
});

const SvgComponentsBaseFile = (entries: string): string =>
  `// DO NOT EDIT. This file is generated by script.
// This file SHOULD be checked into source version control.
// This file is automatically updated

const SVG: Record<string, () => string> = {
  ${entries}
}

export default SVG
`;

// const DIR_PATH = resolve("", new URL("", import.meta.url).pathname, FLAGS.path);
const DIR_PATH = "./static";
console.log("ðŸš€ ~ file: generateSVGDictionary.ts:23 ~ DIR_PATH:", DIR_PATH);
const svgFiles = await promises.readdir(DIR_PATH);

const svgEntries: string[] = [];

// for await (const file of svgFiles) {
for (const file of svgFiles) {
  const [name, extension] = file.split(".");
  if (extension !== "svg") continue;
  const inObject = svgEntries.some((entry) => entry.startsWith(name));
  if (inObject) continue;

  const svgFileContent = (await promises.readFile(`${DIR_PATH}/${file}`))
    .toString()
    .replaceAll(/\n/mg, "");
  const newEntry = `'${name}': () => '${svgFileContent}'`;
  svgEntries.push(newEntry);
}

const newFileContent = SvgComponentsBaseFile(svgEntries.join(",\n"));
try {
  await Deno.writeTextFile("./src/components.ts", newFileContent);
} catch (error) {
  console.log("%cError encountered!", "color: red");
  console.error(error);
}

console.log(
  "%cSVG Dictionary successfully created!",
  "color: green",
);

Deno.exit();
